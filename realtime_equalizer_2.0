

import numpy as np
import soundfile as sf
import os

# Demucs imports
from demucs.pretrained import get_model
from demucs.apply import apply_model
import torch
  
# Path to your song (should be in the same folder as this script)
AUDIO_PATH = os.path.join(os.path.dirname(__file__), '02 llorar√°s.mp3')
if not os.path.exists(AUDIO_PATH):
    raise FileNotFoundError(f'Audio file not found: {AUDIO_PATH}')




# Visualization function

def process_and_print_instr_ratios():
    print('Computing instrAmp/ampTotal for each instrument per second of the song:')
    # Load Demucs model once
    model = get_model('htdemucs')
    model.eval()
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model.to(device)
    stems = model.sources

    # Read audio file
    audio, samplerate = sf.read(AUDIO_PATH, dtype='float32')
    # Ensure stereo: if mono, duplicate channel
    if audio.ndim == 1:
        audio = np.stack([audio, audio], axis=1)
    elif audio.shape[1] == 1:
        audio = np.repeat(audio, 2, axis=1)

    results = []
    num_seconds = int(audio.shape[0] / samplerate)
    for sec in range(num_seconds):
        chunk = audio[sec*samplerate:(sec+1)*samplerate, :].T  # shape (2, N)
        if chunk.shape[1] < samplerate:
            break
        # Demucs expects (batch, channels, samples)
        tensor = torch.tensor(chunk, dtype=torch.float32, device=device).unsqueeze(0)
        with torch.no_grad():
            sources = apply_model(model, tensor, split=True, overlap=0.25)[0]
        instr_amps = {}
        amp_total = 0.0
        for i, stem in enumerate(stems):
            instr = sources[i].cpu().numpy()
            instr_amp = np.sum(np.abs(instr))
            instr_amps[stem] = instr_amp
            amp_total += instr_amp
        if amp_total > 0:
            ratios = {stem: round(instr_amps[stem]/amp_total, 4) for stem in stems}
        else:
            ratios = {stem: 0.0 for stem in stems}
        results.append((sec, ratios))
    for sec, ratios in results:
        print(f"sec {sec}: ", ratios)

def main():
    # Compute and print instrument amplitude ratios for each second (no playback)
    process_and_print_instr_ratios()

if __name__ == '__main__':
    main()
